---
- hosts: web
  become: true

  tasks:

    - name: add PHP 7 repository
      apt_repository: repo='ppa:ondrej/php' state=present
      register: ppastable

    - name: install packages
      apt: name={{ item }} update_cache=yes state=latest
      with_items:
        - git
        - mcrypt
        - nginx
        - php7.0
        - php7.0-cli
        - php7.0-dev
        - php7.0-curl
        - php7.0-fpm
        - php7.0-intl
        - php7.0-json
        - php7.0-mcrypt
        - php7.0-mysql
        - php7.0-sqlite3
        - php7.0-xml
        - php7.0-mbstring
        - php7.0-zip
        - php7.0-gmp
        - php-imagick
        - sqlite3
        - mysql-server
        - mysql-client
        - python-mysqldb
        - makepasswd
        - redis-server
        - nodejs
        - npm
        - imagemagick
        - supervisor
        - python-mysqldb
        - htop

    - name: ensure github.com is a known host
      lineinfile:
        dest: /root/.ssh/known_hosts
        create: yes
        state: present
        line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
        regexp: "^github\\.com"

    - name: PHP web memory limit
      lineinfile:
        dest: /etc/php/7.0/fpm/php.ini
        create: no
        state: present
        line: "memory_limit = 512M"
        regexp: "^memory_limit = "

    - name: install phpredis
      script: phpredis.sh
              creates=/etc/php/7.0/fpm/conf.d/20-redis.ini
      notify:
        - restart php7.0-fpm

    - name: symlink node
      file: src=/usr/bin/nodejs dest=/usr/bin/node state=link

    - name: ensure php7.0-fpm cgi.fix_pathinfo=0
      lineinfile: dest=/etc/php/7.0/fpm/php.ini regexp='^(.*)cgi.fix_pathinfo=' line=cgi.fix_pathinfo=0
      notify:
        - restart php7.0-fpm
        - restart nginx

    - name: create /var/www/ directory
      file: dest=/var/www/
            state=directory
            owner=www-data
            group=www-data
            mode=0700

    - name: create /var/log/ching-shop directory
      file: dest=/var/log/ching-shop
            state=directory
            owner=www-data
            group=www-data
            mode=0700

    - name: clone git repository
      become_user: www-data
      git: >
        dest=/var/www/ching-shop
        repo=https://github.com/hughgrigg/ching-shop.git
        version=master
        update=yes
        force=yes
      notify:
        - restart workers

    - name: install composer
      shell: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
      args:
        creates: /usr/local/bin/composer

    - name: update composer
      shell: /usr/local/bin/composer self-update

    - name: install project with composer
      become_user: www-data
      composer: command=install working_dir=/var/www/ching-shop

    - name: configure nginx
      template: src=nginx.conf
                dest=/etc/nginx/sites-available/www.ching-shop.com.conf
      notify:
        - restart php7.0-fpm
        - restart nginx

    - name: enable nginx site
      file: src=/etc/nginx/sites-available/www.ching-shop.com.conf
            dest=/etc/nginx/sites-enabled/www.ching-shop.com.conf
            state=link
      notify:
        - restart php7.0-fpm
        - restart redis
        - restart nginx

    - name: configure supervisor
      template: src=ching-shop-worker.conf
                dest=/etc/supervisor/conf.d/ching-shop-worker.conf
      notify:
        - restart workers

    - name: Copy public key into /var/www
      authorized_key: user=www-data
                      key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Set www-data user shell
      user: name=www-data shell=/bin/bash

    - name: Enable UFW
      ufw: direction=incoming policy=deny state=enabled

    - name: UFW limit SSH
      ufw: rule=limit port=ssh

    - name: UFW open HTTP
      ufw: rule=allow port=http

    - include_vars: keys.yml

    - name: create .env
      template: src=.env.template
                dest=/var/www/ching-shop/.env
                force=yes

    - name: Set MySQL root password
      mysql_user: user=root
                  password="{{ db_root_password }}"
                  host=localhost
                  login_password="{{ db_root_password }}"

    - name: Create MySQL DB
      mysql_db: name=ching_shop
                state=present
                login_password="{{ db_root_password }}"

    - name: MySQL user
      mysql_user: name=ching_shop
                  password={{ db_password }}
                  priv=ching_shop.*:ALL
                  state=present
                  login_password="{{ db_root_password }}"

    - name: Delete anonymous MySQL user
      mysql_user: user=""
                  state="absent"
                  login_user="root"
                  login_password="{{ db_root_password }}"

    - name: Secure the MySQL root user for IPV6 localhost (::1)
      mysql_user: user="root"
                  password="{{ db_root_password }}"
                  host="::1"
                  login_user="root"
                  login_password="{{ db_root_password }}"

    - name: Secure the MySQL root user for IPV4 localhost (127.0.0.1)
      mysql_user: user="root"
                  password="{{ db_root_password }}"
                  host="127.0.0.1"
                  login_user="root"
                  login_password="{{ db_root_password }}"

    - name: Secure the MySQL root user for localhost domain (localhost)
      mysql_user: user="root"
                  password="{{ db_root_password }}"
                  host="localhost"
                  login_user="root"
                  login_password="{{ db_root_password }}"

    - name: Secure the MySQL root user for server_hostname domain
      mysql_user: user="root"
                  password="{{ db_root_password }}"
                  host="{{ ansible_fqdn }}"
                  login_user="root"
                  login_password="{{ db_root_password }}"

    - name: Remove MySQL test database
      mysql_db: db=test
                state=absent
                login_user="root"
                login_password="{{ db_root_password }}"

    - name: Laravel Scheduler
      cron: >
        job="run-one php /var/www/ching-shop/artisan schedule:run 1>> /dev/null 2>&1"
        state=present
        user=www-data
        name="php artisan schedule:run"

    - name: backup and refresh Laravel
      shell: "cd /var/www/ching-shop && php artisan {{ item }}"
      with_items:
        - "storage:link"
        - "sitemap:build"
        - "backup:run"
        - "migrate --force"
        - "clear-compiled"
        - "config:clear"
        - "config:cache"
        - "view:clear"
        - "route:clear"
        - "route:cache"
        - "optimize"
        - "queue:restart"

    - name: make sure latest npm is installed
      npm: name=npm global=yes

    - name: create /var/www/node_modules directory
      file: dest=/var/www/ching-shop/node_modules
            state=directory
            owner=www-data
            group=www-data
            mode=0700

    - npm: path=/var/www/ching-shop production=yes
      become_user: www-data

    - name: rebuild node-sass
      shell: "npm rebuild node-sass"

    - name: run gulp tasks
      become_user: www-data
      shell: "cd /var/www/ching-shop && ./node_modules/.bin/gulp {{ item }} --production"
      with_items:
        - "sass"
        - "styles"
        - "typings"
        - "typescript"
        - "browserify"
        - "version"
        - "copy"

  handlers:

    - name: restart php7.0-fpm
      service: name=php7.0-fpm state=restarted

    - name: restart nginx
      service: name=nginx state=restarted

    - name: restart redis
      service: name=redis-server state=restarted

    - name: restart workers
      supervisorctl: name=`ching-shop-worker:*`
                     state=restarted
