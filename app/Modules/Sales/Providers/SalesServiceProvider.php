<?php

namespace ChingShop\Modules\Sales\Providers;

use App;
use ChingShop\Modules\Sales\Domain\Basket\Basket;
use ChingShop\Modules\Sales\Domain\CheckoutAssistant;
use ChingShop\Modules\Sales\Domain\Clerk;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Session\Store;
use Illuminate\Support\ServiceProvider;
use PayPal\Rest\ApiContext;
use Stripe\Charge;
use Stripe\Stripe;
use View;

/**
 * Class SalesServiceProvider.
 */
class SalesServiceProvider extends ServiceProvider
{
    /**
     * Additional Compiled Module Classes.
     *
     * Here you may specify additional classes to include in the compiled file
     * generated by the `artisan optimize` command. These should be classes
     * that are included on basically every request into the application.
     *
     * @return array
     */
    public static function compiles()
    {
        return [];
    }

    /**
     * Register the Sales module service provider.
     *
     * This service provider is a convenient place to register your modules
     * services in the IoC container. If you wish, you may make additional
     * methods or service providers to keep the code more focused and granular.
     *
     * @return void
     */
    public function register()
    {
        App::register('ChingShop\Modules\Sales\Providers\RouteServiceProvider');

        /* @noinspection RealpathOnRelativePathsInspection */
        View::addNamespace('sales', realpath(__DIR__.'/../Resources/Views'));

        $this->app->singleton(
            Clerk::class,
            function () {
                return new Clerk(
                    $this->app->make(Store::class),
                    $this->app->make(Guard::class),
                    $this->app->make(Basket::class)
                );
            }
        );
        $this->app->singleton(
            CheckoutAssistant::class,
            function () {
                return new CheckoutAssistant(
                    $this->app->make(Clerk::class)
                );
            }
        );

        $this->app->singleton(
            ApiContext::class,
            function () {
                $apiContext = new ApiContext();
                $apiContext->setConfig(
                    [
                        'acct1.ClientId'     => config(
                            'payment.paypal.acct1.ClientId'
                        ),
                        'acct1.ClientSecret' => config(
                            'payment.paypal.acct1.ClientSecret'
                        ),
                        'mode'               => config(
                            'payment.paypal.mode'
                        ),
                    ]
                );

                return $apiContext;
            }
        );

        $this->app->bind(
            Charge::class,
            function () {
                Stripe::setApiKey(config('services.stripe.secret'));

                return new Charge();
            }
        );
    }

    /**
     * Bootstrap the application events.
     *
     * Here you may register any additional middleware provided with your
     * module with the following addMiddleware() method. You may pass in
     * either an array or a string.
     *
     * @return void
     */
    public function boot()
    {
    }
}
